to clean-expired-beliefs
  let new-B (list)
  foreach B [
    let content-to-maintain (list)
    let current-content (item 1 ?)
    foreach current-content [
      if (first ?) != 0 [ set content-to-maintain (lput ? content-to-maintain) ]
    ]
    if length content-to-maintain > 0 [
      set new-B (lput (list (item 0 ?) content-to-maintain) new-B)
    ]
  ]
  set B new-B
end


to decrease-beliefs-ttl
  let new-B (list)
  foreach B [
    let b-type (item 0 ?)
    let content-list (item 1 ?)
    let new-content-list (list)
    foreach content-list [
      let ttl (item 0 ?)
      let new-content (replace-item 0 ? (ttl - 1))
      set new-content-list (lput new-content new-content-list)
    ]
    set new-B (lput (list b-type new-content-list) new-B)
  ]
  set B new-B
end

to add-belief [ b-type ttl b-args-list]
  let new-content (list ttl b-args-list)
  let beliefs (filter [(first ?1) = b-type] B)
  ifelse (length beliefs) > 0 
  [ 
    set beliefs (first beliefs)
    set B (remove beliefs B)
    let existing-content (filter [bf ?1 = bf new-content] (item 1 beliefs))
    let old-content-list (item 1 beliefs)
    ifelse (length existing-content) > 0 [
      if (first first existing-content) < ttl [
        set beliefs (remove old-content-list beliefs)
        set old-content-list (remove (first existing-content) old-content-list)
        set old-content-list (lput new-content old-content-list)
        set beliefs (lput old-content-list beliefs)
      ]
    ] [
      set beliefs (remove old-content-list beliefs)
      set old-content-list (lput new-content old-content-list)
      set beliefs (lput old-content-list beliefs)
    ]
    set B (lput beliefs B)
  ]
  [ set B (lput (list b-type (list new-content)) B) ]
end


to update-belief [ b-type query-fn new-content ]
  let beliefs (filter [first ? = b-type] B)
  if (length beliefs) > 0 [
    set beliefs (first beliefs)
    let old-content-list (item 1 beliefs)
    let content-to-replace (filter query-fn old-content-list)
    if (length content-to-replace) > 0 [
      set B (remove beliefs B)
      set content-to-replace (first content-to-replace)
      set old-content-list (remove content-to-replace old-content-list)
      set old-content-list (lput new-content old-content-list)
      set B (lput (list b-type old-content-list) B)
    ]
  ]
end


to-report get-beliefs [ b-type query-fn ]
  let beliefs (filter [first ? = b-type] B)
  ifelse empty? beliefs 
  [ report (list) ] 
  [ 
    set beliefs (first beliefs)
    let beliefs-contents (filter query-fn (item 1 beliefs))
    let results (list)
    foreach beliefs-contents [
      set results (lput (list b-type ?) results)
    ]
    report results
  ]
end


to-report has-belief [ b-type query-fn ] 
  let existing-beliefs (filter [first ? = b-type] B)
  if (length existing-beliefs) > 0 [
    set existing-beliefs (first existing-beliefs)
    let contents (item 1 existing-beliefs)
    report (length (filter query-fn contents)) > 0
  ]
  report false
end





to-report belief-type [ bel ]
  report first bel
end


to-report belief-content [ bel ]
  report item 1 (item 1 bel)
end


to-report belief-ttl [ bel ]
  report item 0 (item 1 bel)
end